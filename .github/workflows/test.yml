name: Test this action
on:
  pull_request:
  push:
    branches-ignore:
    - master
    - v1
    tags-ignore:
    - '*'
    paths-ignore:
    - README.md
jobs:
  common:
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-16.04, ubuntu-18.04, macos-latest, windows-latest ]
        # Use various version syntaxes here for testing
        ruby: [ 2.2, 2.3, .ruby-version, .tool-versions, ruby-head, jruby-9.1, jruby, jruby-head, truffleruby, truffleruby-head ]
        exclude:
        - os: windows-latest
          ruby: truffleruby
        - os: windows-latest
          ruby: truffleruby-head
    name: ${{ matrix.os }} ${{ matrix.ruby }}
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - uses: ./
      with:
        ruby-version: ${{ matrix.ruby }}
    - run: ruby -v
    - run: gem install path
    - name: build compiler
      run: |
        ruby -e "puts 'build compiler: ' + RbConfig::CONFIG.fetch('CC_VERSION_MESSAGE', 'unknown').lines.first"
    - name: gcc and ridk version (mingw)
      if: startsWith(matrix.os, 'windows')
      run: |
        $abi, $plat = $(ruby -e "STDOUT.write RbConfig::CONFIG['ruby_version'] + ' ' + RUBY_PLATFORM").split(' ')
        if ($plat.Contains('mingw')) {
          gcc --version
          if ($abi -ge '2.4') {
            ridk version
          } else {
            echo 'ridk is unavailable'
          }
        }
    - name: Subprocess test
      run: ruby test_subprocess.rb
    - name: OpenSSL version
      run: ruby -ropenssl -e 'puts OpenSSL::OPENSSL_LIBRARY_VERSION'
    - name: OpenSSL test
      run: ruby -ropen-uri -e 'puts open(%{https://rubygems.org/}) { |f| f.read(1024) }'
    - name: C extension test
      run: gem install json:2.2.0 --no-document
    - run: bundle --version
    - run: bundle install
    - run: bundle exec rake --version
    - name: which ruby, rake
      if: startsWith(matrix.os, 'windows') == false
      run: which -a ruby rake
    - name: where ruby, rake
      if: startsWith(matrix.os, 'windows')
      run: |
        $ErrorActionPreference = 'Continue'
        $where = 'ruby', 'rake'
        foreach ($e in $where) {
          $rslt = where.exe $e 2>&1 | Out-String
          if ($rslt.contains($e)) { echo $rslt.Trim() }
          else { echo "Can't find $e" }
          echo ''
        }

  specials:
    strategy:
      fail-fast: false
      matrix:
        cfg:
        - { ruby: rubinius, os: ubuntu-18.04   }
        - { ruby: mingw   , os: windows-latest }
        - { ruby: mswin   , os: windows-latest }
    name: ${{ matrix.cfg.os }} ${{ matrix.cfg.ruby }}
    runs-on: ${{ matrix.cfg.os }}
    steps:
    - uses: actions/checkout@v2
    - uses: ./
      with:
        ruby-version: ${{ matrix.cfg.ruby }}
    - run: ruby -v
    - name: build compiler
      run: |
        ruby -e "puts 'build compiler: ' + RbConfig::CONFIG.fetch('CC_VERSION_MESSAGE', 'unknown').lines.first"
    - name: gcc and ridk version (mingw)
      if: startsWith(matrix.os, 'windows')
      run: |
        $abi, $plat = $(ruby -e "STDOUT.write RbConfig::CONFIG['ruby_version'] + ' ' + RUBY_PLATFORM").split(' ')
        if ($plat.Contains('mingw')) {
          gcc --version
          if ($abi -ge '2.4') {
            ridk version
          } else {
            echo 'ridk is unavailable'
          }
        }
    - name: Subprocess test
      run: ruby test_subprocess.rb
    - name: OpenSSL version
      run: ruby -ropenssl -e 'puts OpenSSL::OPENSSL_LIBRARY_VERSION'
    - name: OpenSSL test
      run: ruby -ropen-uri -e 'puts open(%{https://rubygems.org/}) { |f| f.read(1024) }'
    - name: C extension test
      run: gem install json:2.2.0 --no-document
    - run: bundle --version
    - run: bundle install
    - run: bundle exec rake --version
    - name: where ruby, rake
      if: startsWith(matrix.cfg.os, 'windows')
      run: |
        $ErrorActionPreference = 'Continue'
        $where = 'ruby', 'rake'
        foreach ($e in $where) {
          $rslt = where.exe $e 2>&1 | Out-String
          if ($rslt.contains($e)) { echo $rslt.Trim() }
          else { echo "Can't find $e" }
          echo ''
        }

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - run: yarn install
    - run: yarn run package
    - name: Check generated files are up to date
      run: git diff --exit-code
